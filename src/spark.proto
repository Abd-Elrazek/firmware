package spark;

//@max_bytes_length=127
//@max_string_length=127
//@max_repeated_length=127

enum DataType {
  STRING = 1;
  INT32  = 2;
  DOUBLE = 3;
  BOOL   = 4;
  BYTES  = 5;
}

message DataValue {
  optional DataType type    = 1;
  optional string   vString = 2;
  optional int32    vInt    = 3;
  optional double   vDouble = 4;
  optional bool     vBool   = 5;
  optional bytes    vBytes  = 6;
}

message Chunk {
  optional bytes  crc    = 1;
  optional uint32 length = 2;
  optional bytes  data   = 3;
}

message ChunkReceived {
  optional bytes crc = 1;
}

message Event {
  optional string name = 1;
  optional string data = 2;
}

message Ignored {
  optional uint32 received = 1;
}

message KeyChange {
  // As during initial, pre-AES connection handshake
  optional bytes ciphertext1 = 1; // Bytes 1-127 of 256-byte RSA encrypted credentials
  optional bytes ciphertext2 = 2; // Bytes 128-254 of 256-byte RSA encrypted credentials
  optional bytes ciphertext3 = 3; // Bytes 255-256 of 256-byte RSA encrypted credentials
  optional bytes signature1  = 4; // Bytes 1-127 of 256-byte RSA signature
  optional bytes signature2  = 5; // Bytes 128-254 of 256-byte RSA signature
  optional bytes signature3  = 6; // Bytes 255-256 of 256-byte RSA signature
}

message VariableRequest {
  optional string    name  = 1;
  optional bool      set   = 2;
  repeated DataValue value = 3;
}

message VariableValue {
  optional string    name  = 1;
  repeated DataValue value = 2;
}

message FunctionCall {
  optional string    name     = 1;
  repeated string    argNames = 2;
  repeated DataValue value    = 3;
}

message FunctionReturn {
  optional string    name  = 1;
  repeated DataValue value = 2;
}

enum Type {
	CHUNK           = 1;
	CHUNKRECEIVED   = 2;
	EVENT           = 3;
	FUNCTIONCALL    = 4;
	FUNCTIONRETURN  = 5;
	HELLO           = 6;
	IGNORED         = 7;
	KEYCHANGE       = 8;
	UPDATEBEGIN     = 9;
	UPDATEDONE      = 10;
	UPDATEREADY     = 11;
	VARIABLEREQUEST = 12;
	VARIABLEVALUE   = 13;
}

message Envelope {
  optional uint32          counter         = 1;
  optional Type            type            = 2;
  optional VariableRequest variablerequest = 3;
  optional VariableValue   variablevalue   = 4;
  optional FunctionCall    functioncall    = 5;
  optional FunctionReturn  functionreturn  = 6;
  optional Event           event           = 7;
  optional Ignored         ignored         = 8;
  optional Chunk           chunk           = 9;
  optional ChunkReceived   chunkreceived   = 10;
  optional KeyChange       keychange       = 11;
}
