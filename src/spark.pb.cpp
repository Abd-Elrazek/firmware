// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace spark {

namespace {

const ::google::protobuf::Descriptor* DataValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ignored_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ignored_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariableValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariableValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_spark_2eproto() {
  protobuf_AddDesc_spark_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spark.proto");
  GOOGLE_CHECK(file != NULL);
  DataValue_descriptor_ = file->message_type(0);
  static const int DataValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, vstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, vint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, vdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, vbool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, vbytes_),
  };
  DataValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataValue_descriptor_,
      DataValue::default_instance_,
      DataValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataValue));
  Chunk_descriptor_ = file->message_type(1);
  static const int Chunk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, data_),
  };
  Chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk));
  ChunkReceived_descriptor_ = file->message_type(2);
  static const int ChunkReceived_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkReceived, crc_),
  };
  ChunkReceived_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkReceived_descriptor_,
      ChunkReceived::default_instance_,
      ChunkReceived_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkReceived, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkReceived, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkReceived));
  Event_descriptor_ = file->message_type(3);
  static const int Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, data_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Hello_descriptor_ = file->message_type(4);
  static const int Hello_offsets_[1] = {
  };
  Hello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hello));
  Ignored_descriptor_ = file->message_type(5);
  static const int Ignored_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ignored, received_),
  };
  Ignored_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ignored_descriptor_,
      Ignored::default_instance_,
      Ignored_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ignored, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ignored, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ignored));
  KeyChange_descriptor_ = file->message_type(6);
  static const int KeyChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyChange, ciphertext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyChange, signature_),
  };
  KeyChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyChange_descriptor_,
      KeyChange::default_instance_,
      KeyChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyChange));
  UpdateBegin_descriptor_ = file->message_type(7);
  static const int UpdateBegin_offsets_[1] = {
  };
  UpdateBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBegin_descriptor_,
      UpdateBegin::default_instance_,
      UpdateBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBegin));
  UpdateDone_descriptor_ = file->message_type(8);
  static const int UpdateDone_offsets_[1] = {
  };
  UpdateDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDone_descriptor_,
      UpdateDone::default_instance_,
      UpdateDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDone));
  UpdateReady_descriptor_ = file->message_type(9);
  static const int UpdateReady_offsets_[1] = {
  };
  UpdateReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateReady_descriptor_,
      UpdateReady::default_instance_,
      UpdateReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateReady));
  VariableRequest_descriptor_ = file->message_type(10);
  static const int VariableRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableRequest, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableRequest, value_),
  };
  VariableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariableRequest_descriptor_,
      VariableRequest::default_instance_,
      VariableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariableRequest));
  VariableValue_descriptor_ = file->message_type(11);
  static const int VariableValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableValue, value_),
  };
  VariableValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariableValue_descriptor_,
      VariableValue::default_instance_,
      VariableValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariableValue));
  FunctionCall_descriptor_ = file->message_type(12);
  static const int FunctionCall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, argnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, value_),
  };
  FunctionCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionCall_descriptor_,
      FunctionCall::default_instance_,
      FunctionCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionCall));
  FunctionReturn_descriptor_ = file->message_type(13);
  static const int FunctionReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionReturn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionReturn, value_),
  };
  FunctionReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionReturn_descriptor_,
      FunctionReturn::default_instance_,
      FunctionReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionReturn));
  Envelope_descriptor_ = file->message_type(14);
  static const int Envelope_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, variablerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, variablevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, functioncall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, functionreturn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, ignored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, updatebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, updateready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, chunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, chunkreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, updatedone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, hello_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, keychange_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  DataType_descriptor_ = file->enum_type(0);
  Type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spark_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataValue_descriptor_, &DataValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_descriptor_, &Chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkReceived_descriptor_, &ChunkReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ignored_descriptor_, &Ignored::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyChange_descriptor_, &KeyChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBegin_descriptor_, &UpdateBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDone_descriptor_, &UpdateDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateReady_descriptor_, &UpdateReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariableRequest_descriptor_, &VariableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariableValue_descriptor_, &VariableValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionCall_descriptor_, &FunctionCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionReturn_descriptor_, &FunctionReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spark_2eproto() {
  delete DataValue::default_instance_;
  delete DataValue_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
  delete ChunkReceived::default_instance_;
  delete ChunkReceived_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete Ignored::default_instance_;
  delete Ignored_reflection_;
  delete KeyChange::default_instance_;
  delete KeyChange_reflection_;
  delete UpdateBegin::default_instance_;
  delete UpdateBegin_reflection_;
  delete UpdateDone::default_instance_;
  delete UpdateDone_reflection_;
  delete UpdateReady::default_instance_;
  delete UpdateReady_reflection_;
  delete VariableRequest::default_instance_;
  delete VariableRequest_reflection_;
  delete VariableValue::default_instance_;
  delete VariableValue_reflection_;
  delete FunctionCall::default_instance_;
  delete FunctionCall_reflection_;
  delete FunctionReturn::default_instance_;
  delete FunctionReturn_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
}

void protobuf_AddDesc_spark_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013spark.proto\022\005spark\"y\n\tDataValue\022\035\n\004typ"
    "e\030\001 \001(\0162\017.spark.DataType\022\017\n\007vString\030\002 \001("
    "\t\022\014\n\004vInt\030\003 \001(\005\022\017\n\007vDouble\030\004 \001(\001\022\r\n\005vBoo"
    "l\030\005 \001(\010\022\016\n\006vBytes\030\006 \001(\014\"2\n\005Chunk\022\013\n\003crc\030"
    "\001 \001(\014\022\016\n\006length\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\"\034\n\rC"
    "hunkReceived\022\013\n\003crc\030\001 \001(\014\"#\n\005Event\022\014\n\004na"
    "me\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\"\007\n\005Hello\"\033\n\007Ignor"
    "ed\022\020\n\010received\030\001 \001(\r\"2\n\tKeyChange\022\022\n\ncip"
    "hertext\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"\r\n\013Upda"
    "teBegin\"\014\n\nUpdateDone\"\r\n\013UpdateReady\"M\n\017"
    "VariableRequest\022\014\n\004name\030\001 \001(\t\022\013\n\003set\030\002 \001"
    "(\010\022\037\n\005value\030\003 \003(\0132\020.spark.DataValue\">\n\rV"
    "ariableValue\022\014\n\004name\030\001 \001(\t\022\037\n\005value\030\002 \003("
    "\0132\020.spark.DataValue\"O\n\014FunctionCall\022\014\n\004n"
    "ame\030\001 \001(\t\022\020\n\010argNames\030\002 \003(\t\022\037\n\005value\030\003 \003"
    "(\0132\020.spark.DataValue\"\?\n\016FunctionReturn\022\014"
    "\n\004name\030\001 \001(\t\022\037\n\005value\030\002 \003(\0132\020.spark.Data"
    "Value\"\261\004\n\010Envelope\022\017\n\007counter\030\001 \001(\r\022\031\n\004t"
    "ype\030\002 \001(\0162\013.spark.Type\022/\n\017variablereques"
    "t\030\003 \001(\0132\026.spark.VariableRequest\022+\n\rvaria"
    "blevalue\030\004 \001(\0132\024.spark.VariableValue\022)\n\014"
    "functioncall\030\005 \001(\0132\023.spark.FunctionCall\022"
    "-\n\016functionreturn\030\006 \001(\0132\025.spark.Function"
    "Return\022\033\n\005event\030\007 \001(\0132\014.spark.Event\022\037\n\007i"
    "gnored\030\010 \001(\0132\016.spark.Ignored\022\'\n\013updatebe"
    "gin\030\t \001(\0132\022.spark.UpdateBegin\022\'\n\013updater"
    "eady\030\n \001(\0132\022.spark.UpdateReady\022\033\n\005chunk\030"
    "\013 \001(\0132\014.spark.Chunk\022+\n\rchunkreceived\030\014 \001"
    "(\0132\024.spark.ChunkReceived\022%\n\nupdatedone\030\r"
    " \001(\0132\021.spark.UpdateDone\022\033\n\005hello\030\016 \001(\0132\014"
    ".spark.Hello\022#\n\tkeychange\030\017 \001(\0132\020.spark."
    "KeyChange*B\n\010DataType\022\n\n\006STRING\020\001\022\t\n\005INT"
    "32\020\002\022\n\n\006DOUBLE\020\003\022\010\n\004BOOL\020\004\022\t\n\005BYTES\020\005*\326\001"
    "\n\004Type\022\t\n\005CHUNK\020\001\022\021\n\rCHUNKRECEIVED\020\002\022\t\n\005"
    "EVENT\020\003\022\020\n\014FUNCTIONCALL\020\004\022\022\n\016FUNCTIONRET"
    "URN\020\005\022\t\n\005HELLO\020\006\022\013\n\007IGNORED\020\007\022\r\n\tKEYCHAN"
    "GE\020\010\022\017\n\013UPDATEBEGIN\020\t\022\016\n\nUPDATEDONE\020\n\022\017\n"
    "\013UPDATEREADY\020\013\022\023\n\017VARIABLEREQUEST\020\014\022\021\n\rV"
    "ARIABLEVALUE\020\r", 1534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spark.proto", &protobuf_RegisterTypes);
  DataValue::default_instance_ = new DataValue();
  Chunk::default_instance_ = new Chunk();
  ChunkReceived::default_instance_ = new ChunkReceived();
  Event::default_instance_ = new Event();
  Hello::default_instance_ = new Hello();
  Ignored::default_instance_ = new Ignored();
  KeyChange::default_instance_ = new KeyChange();
  UpdateBegin::default_instance_ = new UpdateBegin();
  UpdateDone::default_instance_ = new UpdateDone();
  UpdateReady::default_instance_ = new UpdateReady();
  VariableRequest::default_instance_ = new VariableRequest();
  VariableValue::default_instance_ = new VariableValue();
  FunctionCall::default_instance_ = new FunctionCall();
  FunctionReturn::default_instance_ = new FunctionReturn();
  Envelope::default_instance_ = new Envelope();
  DataValue::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  ChunkReceived::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Hello::default_instance_->InitAsDefaultInstance();
  Ignored::default_instance_->InitAsDefaultInstance();
  KeyChange::default_instance_->InitAsDefaultInstance();
  UpdateBegin::default_instance_->InitAsDefaultInstance();
  UpdateDone::default_instance_->InitAsDefaultInstance();
  UpdateReady::default_instance_->InitAsDefaultInstance();
  VariableRequest::default_instance_->InitAsDefaultInstance();
  VariableValue::default_instance_->InitAsDefaultInstance();
  FunctionCall::default_instance_->InitAsDefaultInstance();
  FunctionReturn::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spark_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spark_2eproto {
  StaticDescriptorInitializer_spark_2eproto() {
    protobuf_AddDesc_spark_2eproto();
  }
} static_descriptor_initializer_spark_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataValue::kTypeFieldNumber;
const int DataValue::kVStringFieldNumber;
const int DataValue::kVIntFieldNumber;
const int DataValue::kVDoubleFieldNumber;
const int DataValue::kVBoolFieldNumber;
const int DataValue::kVBytesFieldNumber;
#endif  // !_MSC_VER

DataValue::DataValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataValue::InitAsDefaultInstance() {
}

DataValue::DataValue(const DataValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataValue::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  vstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vint_ = 0;
  vdouble_ = 0;
  vbool_ = false;
  vbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataValue::~DataValue() {
  SharedDtor();
}

void DataValue::SharedDtor() {
  if (vstring_ != &::google::protobuf::internal::kEmptyString) {
    delete vstring_;
  }
  if (vbytes_ != &::google::protobuf::internal::kEmptyString) {
    delete vbytes_;
  }
  if (this != default_instance_) {
  }
}

void DataValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataValue_descriptor_;
}

const DataValue& DataValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

DataValue* DataValue::default_instance_ = NULL;

DataValue* DataValue::New() const {
  return new DataValue;
}

void DataValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_vstring()) {
      if (vstring_ != &::google::protobuf::internal::kEmptyString) {
        vstring_->clear();
      }
    }
    vint_ = 0;
    vdouble_ = 0;
    vbool_ = false;
    if (has_vbytes()) {
      if (vbytes_ != &::google::protobuf::internal::kEmptyString) {
        vbytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .spark.DataType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spark::DataType_IsValid(value)) {
            set_type(static_cast< ::spark::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vString;
        break;
      }

      // optional string vString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vstring().data(), this->vstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vInt;
        break;
      }

      // optional int32 vInt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vint_)));
          set_has_vint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vDouble;
        break;
      }

      // optional double vDouble = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdouble_)));
          set_has_vdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vBool;
        break;
      }

      // optional bool vBool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vBool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vbool_)));
          set_has_vbool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vBytes;
        break;
      }

      // optional bytes vBytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vbytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .spark.DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string vString = 2;
  if (has_vstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vstring().data(), this->vstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vstring(), output);
  }

  // optional int32 vInt = 3;
  if (has_vint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vint(), output);
  }

  // optional double vDouble = 4;
  if (has_vdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vdouble(), output);
  }

  // optional bool vBool = 5;
  if (has_vbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->vbool(), output);
  }

  // optional bytes vBytes = 6;
  if (has_vbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->vbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .spark.DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string vString = 2;
  if (has_vstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vstring().data(), this->vstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vstring(), target);
  }

  // optional int32 vInt = 3;
  if (has_vint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vint(), target);
  }

  // optional double vDouble = 4;
  if (has_vdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vdouble(), target);
  }

  // optional bool vBool = 5;
  if (has_vbool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->vbool(), target);
  }

  // optional bytes vBytes = 6;
  if (has_vbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->vbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .spark.DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string vString = 2;
    if (has_vstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vstring());
    }

    // optional int32 vInt = 3;
    if (has_vint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vint());
    }

    // optional double vDouble = 4;
    if (has_vdouble()) {
      total_size += 1 + 8;
    }

    // optional bool vBool = 5;
    if (has_vbool()) {
      total_size += 1 + 1;
    }

    // optional bytes vBytes = 6;
    if (has_vbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataValue::MergeFrom(const DataValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vstring()) {
      set_vstring(from.vstring());
    }
    if (from.has_vint()) {
      set_vint(from.vint());
    }
    if (from.has_vdouble()) {
      set_vdouble(from.vdouble());
    }
    if (from.has_vbool()) {
      set_vbool(from.vbool());
    }
    if (from.has_vbytes()) {
      set_vbytes(from.vbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataValue::CopyFrom(const DataValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataValue::IsInitialized() const {

  return true;
}

void DataValue::Swap(DataValue* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(vstring_, other->vstring_);
    std::swap(vint_, other->vint_);
    std::swap(vdouble_, other->vdouble_);
    std::swap(vbool_, other->vbool_);
    std::swap(vbytes_, other->vbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataValue_descriptor_;
  metadata.reflection = DataValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chunk::kCrcFieldNumber;
const int Chunk::kLengthFieldNumber;
const int Chunk::kDataFieldNumber;
#endif  // !_MSC_VER

Chunk::Chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  crc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (crc_ != &::google::protobuf::internal::kEmptyString) {
    delete crc_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New() const {
  return new Chunk;
}

void Chunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crc()) {
      if (crc_ != &::google::protobuf::internal::kEmptyString) {
        crc_->clear();
      }
    }
    length_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes crc = 1;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->crc(), output);
  }

  // optional uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes crc = 1;
  if (has_crc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->crc(), target);
  }

  // optional uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes crc = 1;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crc());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {

  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other != this) {
    std::swap(crc_, other->crc_);
    std::swap(length_, other->length_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkReceived::kCrcFieldNumber;
#endif  // !_MSC_VER

ChunkReceived::ChunkReceived()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkReceived::InitAsDefaultInstance() {
}

ChunkReceived::ChunkReceived(const ChunkReceived& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkReceived::SharedCtor() {
  _cached_size_ = 0;
  crc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkReceived::~ChunkReceived() {
  SharedDtor();
}

void ChunkReceived::SharedDtor() {
  if (crc_ != &::google::protobuf::internal::kEmptyString) {
    delete crc_;
  }
  if (this != default_instance_) {
  }
}

void ChunkReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkReceived_descriptor_;
}

const ChunkReceived& ChunkReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

ChunkReceived* ChunkReceived::default_instance_ = NULL;

ChunkReceived* ChunkReceived::New() const {
  return new ChunkReceived;
}

void ChunkReceived::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crc()) {
      if (crc_ != &::google::protobuf::internal::kEmptyString) {
        crc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes crc = 1;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkReceived::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes crc = 1;
  if (has_crc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkReceived::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes crc = 1;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkReceived::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkReceived* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkReceived*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkReceived::MergeFrom(const ChunkReceived& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkReceived::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkReceived::CopyFrom(const ChunkReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkReceived::IsInitialized() const {

  return true;
}

void ChunkReceived::Swap(ChunkReceived* other) {
  if (other != this) {
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkReceived_descriptor_;
  metadata.reflection = ChunkReceived_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kNameFieldNumber;
const int Event::kDataFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Hello::Hello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  SharedDtor();
}

void Hello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hello::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ignored::kReceivedFieldNumber;
#endif  // !_MSC_VER

Ignored::Ignored()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ignored::InitAsDefaultInstance() {
}

Ignored::Ignored(const Ignored& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ignored::SharedCtor() {
  _cached_size_ = 0;
  received_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ignored::~Ignored() {
  SharedDtor();
}

void Ignored::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ignored::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ignored::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ignored_descriptor_;
}

const Ignored& Ignored::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

Ignored* Ignored::default_instance_ = NULL;

Ignored* Ignored::New() const {
  return new Ignored;
}

void Ignored::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    received_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ignored::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 received = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ignored::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 received = 1;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->received(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ignored::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 received = 1;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->received(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ignored::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 received = 1;
    if (has_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->received());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ignored::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ignored* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ignored*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ignored::MergeFrom(const Ignored& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_received()) {
      set_received(from.received());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ignored::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ignored::CopyFrom(const Ignored& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ignored::IsInitialized() const {

  return true;
}

void Ignored::Swap(Ignored* other) {
  if (other != this) {
    std::swap(received_, other->received_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ignored::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ignored_descriptor_;
  metadata.reflection = Ignored_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyChange::kCiphertextFieldNumber;
const int KeyChange::kSignatureFieldNumber;
#endif  // !_MSC_VER

KeyChange::KeyChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyChange::InitAsDefaultInstance() {
}

KeyChange::KeyChange(const KeyChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyChange::SharedCtor() {
  _cached_size_ = 0;
  ciphertext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyChange::~KeyChange() {
  SharedDtor();
}

void KeyChange::SharedDtor() {
  if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
    delete ciphertext_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void KeyChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyChange_descriptor_;
}

const KeyChange& KeyChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

KeyChange* KeyChange::default_instance_ = NULL;

KeyChange* KeyChange::New() const {
  return new KeyChange;
}

void KeyChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ciphertext()) {
      if (ciphertext_ != &::google::protobuf::internal::kEmptyString) {
        ciphertext_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ciphertext = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ciphertext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ciphertext = 1;
  if (has_ciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ciphertext(), output);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ciphertext = 1;
  if (has_ciphertext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ciphertext(), target);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ciphertext = 1;
    if (has_ciphertext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ciphertext());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyChange::MergeFrom(const KeyChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ciphertext()) {
      set_ciphertext(from.ciphertext());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyChange::CopyFrom(const KeyChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyChange::IsInitialized() const {

  return true;
}

void KeyChange::Swap(KeyChange* other) {
  if (other != this) {
    std::swap(ciphertext_, other->ciphertext_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyChange_descriptor_;
  metadata.reflection = KeyChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateBegin::UpdateBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBegin::InitAsDefaultInstance() {
}

UpdateBegin::UpdateBegin(const UpdateBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBegin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBegin::~UpdateBegin() {
  SharedDtor();
}

void UpdateBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBegin_descriptor_;
}

const UpdateBegin& UpdateBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

UpdateBegin* UpdateBegin::default_instance_ = NULL;

UpdateBegin* UpdateBegin::New() const {
  return new UpdateBegin;
}

void UpdateBegin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdateBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBegin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBegin::MergeFrom(const UpdateBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBegin::CopyFrom(const UpdateBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBegin::IsInitialized() const {

  return true;
}

void UpdateBegin::Swap(UpdateBegin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBegin_descriptor_;
  metadata.reflection = UpdateBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateDone::UpdateDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDone::InitAsDefaultInstance() {
}

UpdateDone::UpdateDone(const UpdateDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDone::~UpdateDone() {
  SharedDtor();
}

void UpdateDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDone_descriptor_;
}

const UpdateDone& UpdateDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

UpdateDone* UpdateDone::default_instance_ = NULL;

UpdateDone* UpdateDone::New() const {
  return new UpdateDone;
}

void UpdateDone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdateDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDone::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDone::MergeFrom(const UpdateDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDone::CopyFrom(const UpdateDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDone::IsInitialized() const {

  return true;
}

void UpdateDone::Swap(UpdateDone* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDone_descriptor_;
  metadata.reflection = UpdateDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateReady::UpdateReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateReady::InitAsDefaultInstance() {
}

UpdateReady::UpdateReady(const UpdateReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateReady::~UpdateReady() {
  SharedDtor();
}

void UpdateReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateReady_descriptor_;
}

const UpdateReady& UpdateReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

UpdateReady* UpdateReady::default_instance_ = NULL;

UpdateReady* UpdateReady::New() const {
  return new UpdateReady;
}

void UpdateReady::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdateReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateReady::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateReady::MergeFrom(const UpdateReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateReady::CopyFrom(const UpdateReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateReady::IsInitialized() const {

  return true;
}

void UpdateReady::Swap(UpdateReady* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateReady_descriptor_;
  metadata.reflection = UpdateReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VariableRequest::kNameFieldNumber;
const int VariableRequest::kSetFieldNumber;
const int VariableRequest::kValueFieldNumber;
#endif  // !_MSC_VER

VariableRequest::VariableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariableRequest::InitAsDefaultInstance() {
}

VariableRequest::VariableRequest(const VariableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariableRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariableRequest::~VariableRequest() {
  SharedDtor();
}

void VariableRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VariableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariableRequest_descriptor_;
}

const VariableRequest& VariableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

VariableRequest* VariableRequest::default_instance_ = NULL;

VariableRequest* VariableRequest::New() const {
  return new VariableRequest;
}

void VariableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    set_ = false;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_set;
        break;
      }

      // optional bool set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated .spark.DataValue value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool set = 2;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->set(), output);
  }

  // repeated .spark.DataValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool set = 2;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->set(), target);
  }

  // repeated .spark.DataValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool set = 2;
    if (has_set()) {
      total_size += 1 + 1;
    }

  }
  // repeated .spark.DataValue value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariableRequest::MergeFrom(const VariableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableRequest::CopyFrom(const VariableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableRequest::IsInitialized() const {

  return true;
}

void VariableRequest::Swap(VariableRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(set_, other->set_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariableRequest_descriptor_;
  metadata.reflection = VariableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VariableValue::kNameFieldNumber;
const int VariableValue::kValueFieldNumber;
#endif  // !_MSC_VER

VariableValue::VariableValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariableValue::InitAsDefaultInstance() {
}

VariableValue::VariableValue(const VariableValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariableValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariableValue::~VariableValue() {
  SharedDtor();
}

void VariableValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VariableValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariableValue_descriptor_;
}

const VariableValue& VariableValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

VariableValue* VariableValue::default_instance_ = NULL;

VariableValue* VariableValue::New() const {
  return new VariableValue;
}

void VariableValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariableValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated .spark.DataValue value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariableValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .spark.DataValue value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariableValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .spark.DataValue value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariableValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .spark.DataValue value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariableValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariableValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariableValue::MergeFrom(const VariableValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariableValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableValue::CopyFrom(const VariableValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableValue::IsInitialized() const {

  return true;
}

void VariableValue::Swap(VariableValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariableValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariableValue_descriptor_;
  metadata.reflection = VariableValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionCall::kNameFieldNumber;
const int FunctionCall::kArgNamesFieldNumber;
const int FunctionCall::kValueFieldNumber;
#endif  // !_MSC_VER

FunctionCall::FunctionCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionCall::InitAsDefaultInstance() {
}

FunctionCall::FunctionCall(const FunctionCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionCall::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionCall::~FunctionCall() {
  SharedDtor();
}

void FunctionCall::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FunctionCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionCall_descriptor_;
}

const FunctionCall& FunctionCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

FunctionCall* FunctionCall::default_instance_ = NULL;

FunctionCall* FunctionCall::New() const {
  return new FunctionCall;
}

void FunctionCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  argnames_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argNames;
        break;
      }

      // repeated string argNames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->argnames(this->argnames_size() - 1).data(),
            this->argnames(this->argnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argNames;
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated .spark.DataValue value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string argNames = 2;
  for (int i = 0; i < this->argnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->argnames(i).data(), this->argnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->argnames(i), output);
  }

  // repeated .spark.DataValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string argNames = 2;
  for (int i = 0; i < this->argnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->argnames(i).data(), this->argnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->argnames(i), target);
  }

  // repeated .spark.DataValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string argNames = 2;
  total_size += 1 * this->argnames_size();
  for (int i = 0; i < this->argnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argnames(i));
  }

  // repeated .spark.DataValue value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  argnames_.MergeFrom(from.argnames_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {

  return true;
}

void FunctionCall::Swap(FunctionCall* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    argnames_.Swap(&other->argnames_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionCall_descriptor_;
  metadata.reflection = FunctionCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionReturn::kNameFieldNumber;
const int FunctionReturn::kValueFieldNumber;
#endif  // !_MSC_VER

FunctionReturn::FunctionReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionReturn::InitAsDefaultInstance() {
}

FunctionReturn::FunctionReturn(const FunctionReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionReturn::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionReturn::~FunctionReturn() {
  SharedDtor();
}

void FunctionReturn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FunctionReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionReturn_descriptor_;
}

const FunctionReturn& FunctionReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

FunctionReturn* FunctionReturn::default_instance_ = NULL;

FunctionReturn* FunctionReturn::New() const {
  return new FunctionReturn;
}

void FunctionReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated .spark.DataValue value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .spark.DataValue value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .spark.DataValue value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .spark.DataValue value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionReturn::MergeFrom(const FunctionReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionReturn::CopyFrom(const FunctionReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionReturn::IsInitialized() const {

  return true;
}

void FunctionReturn::Swap(FunctionReturn* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionReturn_descriptor_;
  metadata.reflection = FunctionReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Envelope::kCounterFieldNumber;
const int Envelope::kTypeFieldNumber;
const int Envelope::kVariablerequestFieldNumber;
const int Envelope::kVariablevalueFieldNumber;
const int Envelope::kFunctioncallFieldNumber;
const int Envelope::kFunctionreturnFieldNumber;
const int Envelope::kEventFieldNumber;
const int Envelope::kIgnoredFieldNumber;
const int Envelope::kUpdatebeginFieldNumber;
const int Envelope::kUpdatereadyFieldNumber;
const int Envelope::kChunkFieldNumber;
const int Envelope::kChunkreceivedFieldNumber;
const int Envelope::kUpdatedoneFieldNumber;
const int Envelope::kHelloFieldNumber;
const int Envelope::kKeychangeFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  variablerequest_ = const_cast< ::spark::VariableRequest*>(&::spark::VariableRequest::default_instance());
  variablevalue_ = const_cast< ::spark::VariableValue*>(&::spark::VariableValue::default_instance());
  functioncall_ = const_cast< ::spark::FunctionCall*>(&::spark::FunctionCall::default_instance());
  functionreturn_ = const_cast< ::spark::FunctionReturn*>(&::spark::FunctionReturn::default_instance());
  event_ = const_cast< ::spark::Event*>(&::spark::Event::default_instance());
  ignored_ = const_cast< ::spark::Ignored*>(&::spark::Ignored::default_instance());
  updatebegin_ = const_cast< ::spark::UpdateBegin*>(&::spark::UpdateBegin::default_instance());
  updateready_ = const_cast< ::spark::UpdateReady*>(&::spark::UpdateReady::default_instance());
  chunk_ = const_cast< ::spark::Chunk*>(&::spark::Chunk::default_instance());
  chunkreceived_ = const_cast< ::spark::ChunkReceived*>(&::spark::ChunkReceived::default_instance());
  updatedone_ = const_cast< ::spark::UpdateDone*>(&::spark::UpdateDone::default_instance());
  hello_ = const_cast< ::spark::Hello*>(&::spark::Hello::default_instance());
  keychange_ = const_cast< ::spark::KeyChange*>(&::spark::KeyChange::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  counter_ = 0u;
  type_ = 1;
  variablerequest_ = NULL;
  variablevalue_ = NULL;
  functioncall_ = NULL;
  functionreturn_ = NULL;
  event_ = NULL;
  ignored_ = NULL;
  updatebegin_ = NULL;
  updateready_ = NULL;
  chunk_ = NULL;
  chunkreceived_ = NULL;
  updatedone_ = NULL;
  hello_ = NULL;
  keychange_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete variablerequest_;
    delete variablevalue_;
    delete functioncall_;
    delete functionreturn_;
    delete event_;
    delete ignored_;
    delete updatebegin_;
    delete updateready_;
    delete chunk_;
    delete chunkreceived_;
    delete updatedone_;
    delete hello_;
    delete keychange_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spark_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counter_ = 0u;
    type_ = 1;
    if (has_variablerequest()) {
      if (variablerequest_ != NULL) variablerequest_->::spark::VariableRequest::Clear();
    }
    if (has_variablevalue()) {
      if (variablevalue_ != NULL) variablevalue_->::spark::VariableValue::Clear();
    }
    if (has_functioncall()) {
      if (functioncall_ != NULL) functioncall_->::spark::FunctionCall::Clear();
    }
    if (has_functionreturn()) {
      if (functionreturn_ != NULL) functionreturn_->::spark::FunctionReturn::Clear();
    }
    if (has_event()) {
      if (event_ != NULL) event_->::spark::Event::Clear();
    }
    if (has_ignored()) {
      if (ignored_ != NULL) ignored_->::spark::Ignored::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_updatebegin()) {
      if (updatebegin_ != NULL) updatebegin_->::spark::UpdateBegin::Clear();
    }
    if (has_updateready()) {
      if (updateready_ != NULL) updateready_->::spark::UpdateReady::Clear();
    }
    if (has_chunk()) {
      if (chunk_ != NULL) chunk_->::spark::Chunk::Clear();
    }
    if (has_chunkreceived()) {
      if (chunkreceived_ != NULL) chunkreceived_->::spark::ChunkReceived::Clear();
    }
    if (has_updatedone()) {
      if (updatedone_ != NULL) updatedone_->::spark::UpdateDone::Clear();
    }
    if (has_hello()) {
      if (hello_ != NULL) hello_->::spark::Hello::Clear();
    }
    if (has_keychange()) {
      if (keychange_ != NULL) keychange_->::spark::KeyChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .spark.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::spark::Type_IsValid(value)) {
            set_type(static_cast< ::spark::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_variablerequest;
        break;
      }

      // optional .spark.VariableRequest variablerequest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variablerequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variablerequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_variablevalue;
        break;
      }

      // optional .spark.VariableValue variablevalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variablevalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variablevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_functioncall;
        break;
      }

      // optional .spark.FunctionCall functioncall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functioncall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_functioncall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_functionreturn;
        break;
      }

      // optional .spark.FunctionReturn functionreturn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionreturn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_functionreturn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_event;
        break;
      }

      // optional .spark.Event event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ignored;
        break;
      }

      // optional .spark.Ignored ignored = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ignored:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ignored()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_updatebegin;
        break;
      }

      // optional .spark.UpdateBegin updatebegin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updatebegin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatebegin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_updateready;
        break;
      }

      // optional .spark.UpdateReady updateready = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateready:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updateready()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_chunk;
        break;
      }

      // optional .spark.Chunk chunk = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_chunkreceived;
        break;
      }

      // optional .spark.ChunkReceived chunkreceived = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunkreceived:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunkreceived()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_updatedone;
        break;
      }

      // optional .spark.UpdateDone updatedone = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updatedone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updatedone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hello;
        break;
      }

      // optional .spark.Hello hello = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hello:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_keychange;
        break;
      }

      // optional .spark.KeyChange keychange = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keychange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keychange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 counter = 1;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->counter(), output);
  }

  // optional .spark.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .spark.VariableRequest variablerequest = 3;
  if (has_variablerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->variablerequest(), output);
  }

  // optional .spark.VariableValue variablevalue = 4;
  if (has_variablevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variablevalue(), output);
  }

  // optional .spark.FunctionCall functioncall = 5;
  if (has_functioncall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->functioncall(), output);
  }

  // optional .spark.FunctionReturn functionreturn = 6;
  if (has_functionreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->functionreturn(), output);
  }

  // optional .spark.Event event = 7;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->event(), output);
  }

  // optional .spark.Ignored ignored = 8;
  if (has_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ignored(), output);
  }

  // optional .spark.UpdateBegin updatebegin = 9;
  if (has_updatebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->updatebegin(), output);
  }

  // optional .spark.UpdateReady updateready = 10;
  if (has_updateready()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->updateready(), output);
  }

  // optional .spark.Chunk chunk = 11;
  if (has_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->chunk(), output);
  }

  // optional .spark.ChunkReceived chunkreceived = 12;
  if (has_chunkreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->chunkreceived(), output);
  }

  // optional .spark.UpdateDone updatedone = 13;
  if (has_updatedone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->updatedone(), output);
  }

  // optional .spark.Hello hello = 14;
  if (has_hello()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hello(), output);
  }

  // optional .spark.KeyChange keychange = 15;
  if (has_keychange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->keychange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 counter = 1;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->counter(), target);
  }

  // optional .spark.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .spark.VariableRequest variablerequest = 3;
  if (has_variablerequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->variablerequest(), target);
  }

  // optional .spark.VariableValue variablevalue = 4;
  if (has_variablevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variablevalue(), target);
  }

  // optional .spark.FunctionCall functioncall = 5;
  if (has_functioncall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->functioncall(), target);
  }

  // optional .spark.FunctionReturn functionreturn = 6;
  if (has_functionreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->functionreturn(), target);
  }

  // optional .spark.Event event = 7;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->event(), target);
  }

  // optional .spark.Ignored ignored = 8;
  if (has_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ignored(), target);
  }

  // optional .spark.UpdateBegin updatebegin = 9;
  if (has_updatebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->updatebegin(), target);
  }

  // optional .spark.UpdateReady updateready = 10;
  if (has_updateready()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->updateready(), target);
  }

  // optional .spark.Chunk chunk = 11;
  if (has_chunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->chunk(), target);
  }

  // optional .spark.ChunkReceived chunkreceived = 12;
  if (has_chunkreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->chunkreceived(), target);
  }

  // optional .spark.UpdateDone updatedone = 13;
  if (has_updatedone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->updatedone(), target);
  }

  // optional .spark.Hello hello = 14;
  if (has_hello()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->hello(), target);
  }

  // optional .spark.KeyChange keychange = 15;
  if (has_keychange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->keychange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 counter = 1;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counter());
    }

    // optional .spark.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .spark.VariableRequest variablerequest = 3;
    if (has_variablerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variablerequest());
    }

    // optional .spark.VariableValue variablevalue = 4;
    if (has_variablevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variablevalue());
    }

    // optional .spark.FunctionCall functioncall = 5;
    if (has_functioncall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->functioncall());
    }

    // optional .spark.FunctionReturn functionreturn = 6;
    if (has_functionreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->functionreturn());
    }

    // optional .spark.Event event = 7;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

    // optional .spark.Ignored ignored = 8;
    if (has_ignored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ignored());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .spark.UpdateBegin updatebegin = 9;
    if (has_updatebegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatebegin());
    }

    // optional .spark.UpdateReady updateready = 10;
    if (has_updateready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updateready());
    }

    // optional .spark.Chunk chunk = 11;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk());
    }

    // optional .spark.ChunkReceived chunkreceived = 12;
    if (has_chunkreceived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunkreceived());
    }

    // optional .spark.UpdateDone updatedone = 13;
    if (has_updatedone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updatedone());
    }

    // optional .spark.Hello hello = 14;
    if (has_hello()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hello());
    }

    // optional .spark.KeyChange keychange = 15;
    if (has_keychange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keychange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_variablerequest()) {
      mutable_variablerequest()->::spark::VariableRequest::MergeFrom(from.variablerequest());
    }
    if (from.has_variablevalue()) {
      mutable_variablevalue()->::spark::VariableValue::MergeFrom(from.variablevalue());
    }
    if (from.has_functioncall()) {
      mutable_functioncall()->::spark::FunctionCall::MergeFrom(from.functioncall());
    }
    if (from.has_functionreturn()) {
      mutable_functionreturn()->::spark::FunctionReturn::MergeFrom(from.functionreturn());
    }
    if (from.has_event()) {
      mutable_event()->::spark::Event::MergeFrom(from.event());
    }
    if (from.has_ignored()) {
      mutable_ignored()->::spark::Ignored::MergeFrom(from.ignored());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_updatebegin()) {
      mutable_updatebegin()->::spark::UpdateBegin::MergeFrom(from.updatebegin());
    }
    if (from.has_updateready()) {
      mutable_updateready()->::spark::UpdateReady::MergeFrom(from.updateready());
    }
    if (from.has_chunk()) {
      mutable_chunk()->::spark::Chunk::MergeFrom(from.chunk());
    }
    if (from.has_chunkreceived()) {
      mutable_chunkreceived()->::spark::ChunkReceived::MergeFrom(from.chunkreceived());
    }
    if (from.has_updatedone()) {
      mutable_updatedone()->::spark::UpdateDone::MergeFrom(from.updatedone());
    }
    if (from.has_hello()) {
      mutable_hello()->::spark::Hello::MergeFrom(from.hello());
    }
    if (from.has_keychange()) {
      mutable_keychange()->::spark::KeyChange::MergeFrom(from.keychange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(counter_, other->counter_);
    std::swap(type_, other->type_);
    std::swap(variablerequest_, other->variablerequest_);
    std::swap(variablevalue_, other->variablevalue_);
    std::swap(functioncall_, other->functioncall_);
    std::swap(functionreturn_, other->functionreturn_);
    std::swap(event_, other->event_);
    std::swap(ignored_, other->ignored_);
    std::swap(updatebegin_, other->updatebegin_);
    std::swap(updateready_, other->updateready_);
    std::swap(chunk_, other->chunk_);
    std::swap(chunkreceived_, other->chunkreceived_);
    std::swap(updatedone_, other->updatedone_);
    std::swap(hello_, other->hello_);
    std::swap(keychange_, other->keychange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spark

// @@protoc_insertion_point(global_scope)
