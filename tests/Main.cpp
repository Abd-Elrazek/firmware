#include "Main.h"

TEST_FIXTURE(HandshakeFixture, NoErrorsGeneratingCiphertext)
{
  uint8_t ciphertext[256];
  int err = ciphertext_from_nonce_and_id(nonce, id, pubkey, ciphertext);
  CHECK_EQUAL(0, err);
}

TEST_FIXTURE(HandshakeFixture, CiphertextMatchesOpenSSLExample)
{
  const uint8_t expected[256] = {
    0x1c, 0x44, 0x2c, 0xb9, 0x26, 0x1a, 0x5a, 0xf4,
    0x83, 0x79, 0x30, 0x40, 0x7e, 0x6f, 0x45, 0x9a,
    0x69, 0xd3, 0xd4, 0x61, 0xde, 0x2a, 0xab, 0x3c,
    0xb1, 0xe0, 0x0b, 0xc5, 0x5a, 0xd4, 0x9b, 0x7c,
    0x44, 0x01, 0x80, 0xac, 0x3b, 0x27, 0x06, 0x77,
    0x60, 0xe2, 0x94, 0xce, 0xdb, 0xdd, 0xd3, 0xbc,
    0xb5, 0xac, 0x2e, 0x3d, 0x03, 0xe1, 0xcd, 0x77,
    0x8f, 0x9d, 0x23, 0x04, 0x06, 0xb8, 0x30, 0x9b,
    0x1e, 0x59, 0xa2, 0x39, 0xed, 0xe7, 0xea, 0xcf,
    0x24, 0xbd, 0x61, 0xb6, 0x8c, 0x20, 0x77, 0x5b,
    0xa3, 0x7e, 0xbd, 0x48, 0xe7, 0x42, 0x82, 0x06,
    0xe8, 0x84, 0x1c, 0x98, 0x61, 0x61, 0x41, 0x24,
    0x4f, 0xd3, 0x03, 0xd8, 0x8e, 0x77, 0x44, 0xeb,
    0x07, 0x78, 0x36, 0xe0, 0x6c, 0xe9, 0xc4, 0xce,
    0xad, 0xb0, 0x71, 0xc9, 0x4a, 0x5f, 0x0a, 0x4d,
    0x6e, 0xf4, 0xa2, 0xea, 0x4d, 0xab, 0xa7, 0xa8,
    0x07, 0x20, 0xd1, 0xf0, 0x7a, 0x72, 0x5e, 0x6a,
    0xc6, 0x89, 0x5a, 0x8f, 0x32, 0x39, 0x95, 0xe4,
    0x36, 0xab, 0x17, 0x22, 0xb2, 0x6f, 0xaf, 0x94,
    0xd1, 0x28, 0xba, 0x53, 0x83, 0x84, 0xa4, 0x48,
    0xe2, 0xfd, 0x47, 0x85, 0xdd, 0x99, 0x44, 0x35,
    0xbb, 0x53, 0x22, 0x12, 0xfb, 0x2c, 0x0d, 0x2c,
    0xc9, 0xf2, 0xa1, 0x58, 0x4f, 0xd9, 0x8f, 0x89,
    0xf8, 0x33, 0x36, 0x4b, 0xe6, 0x61, 0x6d, 0xb7,
    0x4e, 0xf0, 0x9e, 0xff, 0x22, 0x33, 0x50, 0x23,
    0x71, 0x19, 0xf1, 0x31, 0x41, 0x7f, 0x6d, 0x81,
    0x3a, 0x6c, 0xde, 0x30, 0x0a, 0x5e, 0x92, 0x3a,
    0x42, 0xb1, 0xfb, 0xcc, 0xce, 0xda, 0xa3, 0x9f,
    0x5b, 0x5b, 0x83, 0xa2, 0x67, 0x13, 0x09, 0xe9,
    0x82, 0x10, 0xf2, 0x40, 0xaf, 0xfa, 0xbb, 0x0e,
    0x34, 0x31, 0xab, 0xec, 0x81, 0xdc, 0x73, 0x2a,
    0x32, 0x63, 0x60, 0x87, 0x92, 0xa1, 0xd7, 0xa8 };
  uint8_t ciphertext[256];
  ciphertext_from_nonce_and_id(nonce, id, pubkey, ciphertext);
  CHECK_ARRAY_EQUAL(expected, ciphertext, 256);
}

TEST(RSASelfTestSucceeds)
{
  CHECK_EQUAL(0, rsa_self_test(0));
}

TEST_FIXTURE(HandshakeFixture, FixturePublicKeyIsValid)
{
  rsa_context rsa;
  mpi_read_binary(&rsa.N, pubkey, 256);
  mpi_read_string(&rsa.E, 16, "10001");
  CHECK_EQUAL(0, rsa_check_pubkey(&rsa));
}

TEST_FIXTURE(HandshakeFixture, NoErrorsInRSADecryption)
{
  uint8_t aes_credentials[40];
  int err = decipher_aes_credentials(private_key,
                                     encrypted_aes_credentials,
                                     aes_credentials);
  CHECK_EQUAL(0, err);
}

TEST_FIXTURE(HandshakeFixture, RSADecryptionMatchesOpenSSLExample)
{
  uint8_t expected[40] = {
    0x50, 0x8e, 0x8a, 0xfd, 0x78, 0x73, 0x23, 0x38,
    0x67, 0xd6, 0x56, 0xc0, 0xca, 0x46, 0x04, 0x8e,
    0x0a, 0xbb, 0x06, 0xe3, 0x9b, 0xc5, 0x7e, 0x2c,
    0x9b, 0xce, 0x0b, 0xdf, 0xc5, 0x52, 0xc8, 0x2d,
    0xf6, 0x48, 0x0d, 0x23, 0xc5, 0x0e, 0x2d, 0x6d };
  uint8_t aes_credentials[40];
  decipher_aes_credentials(private_key,
                           encrypted_aes_credentials,
                           aes_credentials);
  CHECK_ARRAY_EQUAL(expected, aes_credentials, 40);
}

TEST_FIXTURE(HandshakeFixture, HMACMatchesOpenSSLExample)
{
  uint8_t hmac[20];
  uint8_t hmac_key[40];
  decipher_aes_credentials(private_key,
                           encrypted_aes_credentials,
                           hmac_key);
  calculate_ciphertext_hmac(encrypted_aes_credentials, hmac_key, hmac);
  CHECK_ARRAY_EQUAL(expected_hmac, hmac, 20);
}

TEST_FIXTURE(HandshakeFixture, VerifiedSignatureIsHMAC)
{
  int err = verify_signature(signature, pubkey, expected_hmac);
  CHECK_EQUAL(0, err);
}

int main(int, char const *[])
{
  return UnitTest::RunAllTests();
}
