/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Wed Oct 10 13:06:10 2018. */

#ifndef PB_PARTICLE_CTRL_CELLULAR_CELLULAR_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_CELLULAR_CELLULAR_PB_H_INCLUDED
#include <pb.h>

#include "extensions.pb.h"

#include "common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _particle_ctrl_cellular_SimType {
    particle_ctrl_cellular_SimType_INVALID_SIM_TYPE = 0,
    particle_ctrl_cellular_SimType_INTERNAL = 1,
    particle_ctrl_cellular_SimType_EXTERNAL = 2
} particle_ctrl_cellular_SimType;
#define _particle_ctrl_cellular_SimType_MIN particle_ctrl_cellular_SimType_INVALID_SIM_TYPE
#define _particle_ctrl_cellular_SimType_MAX particle_ctrl_cellular_SimType_EXTERNAL
#define _particle_ctrl_cellular_SimType_ARRAYSIZE ((particle_ctrl_cellular_SimType)(particle_ctrl_cellular_SimType_EXTERNAL+1))

/* Struct definitions */
typedef struct _particle_ctrl_cellular_AccessPoint {
    pb_callback_t apn;
    pb_callback_t user;
    pb_callback_t password;
    bool use_defaults;
/* @@protoc_insertion_point(struct:particle_ctrl_cellular_AccessPoint) */
} particle_ctrl_cellular_AccessPoint;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_cellular_AccessPoint_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define particle_ctrl_cellular_AccessPoint_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_cellular_AccessPoint_apn_tag 1
#define particle_ctrl_cellular_AccessPoint_user_tag 2
#define particle_ctrl_cellular_AccessPoint_password_tag 3
#define particle_ctrl_cellular_AccessPoint_use_defaults_tag 4

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_cellular_AccessPoint_fields[5];

/* Maximum encoded size of messages (where known) */
/* particle_ctrl_cellular_AccessPoint_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CELLULAR_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
