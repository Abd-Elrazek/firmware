/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Tue Nov 28 16:08:14 2017. */

#ifndef PB_PARTICLE_CTRL_NETWORK_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_NETWORK_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _particle_ctrl_NetworkState {
    particle_ctrl_NetworkState_NETWORK_STATUS_NONE = 0,
    particle_ctrl_NetworkState_DOWN = 1,
    particle_ctrl_NetworkState_UP = 2
} particle_ctrl_NetworkState;
#define _particle_ctrl_NetworkState_MIN particle_ctrl_NetworkState_NETWORK_STATUS_NONE
#define _particle_ctrl_NetworkState_MAX particle_ctrl_NetworkState_UP
#define _particle_ctrl_NetworkState_ARRAYSIZE ((particle_ctrl_NetworkState)(particle_ctrl_NetworkState_UP+1))

typedef enum _particle_ctrl_IPConfiguration_Type {
    particle_ctrl_IPConfiguration_Type_NONE = 0,
    particle_ctrl_IPConfiguration_Type_DHCP = 1,
    particle_ctrl_IPConfiguration_Type_STATIC = 2
} particle_ctrl_IPConfiguration_Type;
#define _particle_ctrl_IPConfiguration_Type_MIN particle_ctrl_IPConfiguration_Type_NONE
#define _particle_ctrl_IPConfiguration_Type_MAX particle_ctrl_IPConfiguration_Type_STATIC
#define _particle_ctrl_IPConfiguration_Type_ARRAYSIZE ((particle_ctrl_IPConfiguration_Type)(particle_ctrl_IPConfiguration_Type_STATIC+1))

/* Struct definitions */
typedef struct _particle_ctrl_DNSConfiguration {
    pb_callback_t servers;
/* @@protoc_insertion_point(struct:particle_ctrl_DNSConfiguration) */
} particle_ctrl_DNSConfiguration;

typedef struct _particle_ctrl_GetNetworkConfigurationRequest {
    int32_t interface;
    bool stored;
/* @@protoc_insertion_point(struct:particle_ctrl_GetNetworkConfigurationRequest) */
} particle_ctrl_GetNetworkConfigurationRequest;

typedef struct _particle_ctrl_IPConfiguration {
    particle_ctrl_IPConfiguration_Type type;
    particle_ctrl_IPAddress address;
    particle_ctrl_IPAddress netmask;
    particle_ctrl_IPAddress gateway;
    particle_ctrl_IPAddress dhcp_server;
    pb_callback_t hostname;
/* @@protoc_insertion_point(struct:particle_ctrl_IPConfiguration) */
} particle_ctrl_IPConfiguration;

typedef PB_BYTES_ARRAY_T(6) particle_ctrl_NetworkConfiguration_mac_t;
typedef struct _particle_ctrl_NetworkConfiguration {
    int32_t interface;
    particle_ctrl_NetworkState state;
    pb_callback_t name;
    particle_ctrl_NetworkConfiguration_mac_t mac;
    particle_ctrl_IPConfiguration ipconfig;
    particle_ctrl_DNSConfiguration dnsconfig;
/* @@protoc_insertion_point(struct:particle_ctrl_NetworkConfiguration) */
} particle_ctrl_NetworkConfiguration;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_IPConfiguration_init_default {(particle_ctrl_IPConfiguration_Type)0, particle_ctrl_IPAddress_init_default, particle_ctrl_IPAddress_init_default, particle_ctrl_IPAddress_init_default, particle_ctrl_IPAddress_init_default, {{NULL}, NULL}}
#define particle_ctrl_DNSConfiguration_init_default {{{NULL}, NULL}}
#define particle_ctrl_NetworkConfiguration_init_default {0, (particle_ctrl_NetworkState)0, {{NULL}, NULL}, {0, {0}}, particle_ctrl_IPConfiguration_init_default, particle_ctrl_DNSConfiguration_init_default}
#define particle_ctrl_GetNetworkConfigurationRequest_init_default {0, 0}
#define particle_ctrl_IPConfiguration_init_zero  {(particle_ctrl_IPConfiguration_Type)0, particle_ctrl_IPAddress_init_zero, particle_ctrl_IPAddress_init_zero, particle_ctrl_IPAddress_init_zero, particle_ctrl_IPAddress_init_zero, {{NULL}, NULL}}
#define particle_ctrl_DNSConfiguration_init_zero {{{NULL}, NULL}}
#define particle_ctrl_NetworkConfiguration_init_zero {0, (particle_ctrl_NetworkState)0, {{NULL}, NULL}, {0, {0}}, particle_ctrl_IPConfiguration_init_zero, particle_ctrl_DNSConfiguration_init_zero}
#define particle_ctrl_GetNetworkConfigurationRequest_init_zero {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_DNSConfiguration_servers_tag 1
#define particle_ctrl_GetNetworkConfigurationRequest_interface_tag 1
#define particle_ctrl_GetNetworkConfigurationRequest_stored_tag 2
#define particle_ctrl_IPConfiguration_type_tag   1
#define particle_ctrl_IPConfiguration_address_tag 2
#define particle_ctrl_IPConfiguration_netmask_tag 3
#define particle_ctrl_IPConfiguration_gateway_tag 4
#define particle_ctrl_IPConfiguration_dhcp_server_tag 5
#define particle_ctrl_IPConfiguration_hostname_tag 6
#define particle_ctrl_NetworkConfiguration_interface_tag 1
#define particle_ctrl_NetworkConfiguration_state_tag 2
#define particle_ctrl_NetworkConfiguration_name_tag 3
#define particle_ctrl_NetworkConfiguration_mac_tag 4
#define particle_ctrl_NetworkConfiguration_ipconfig_tag 5
#define particle_ctrl_NetworkConfiguration_dnsconfig_tag 6

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_IPConfiguration_fields[7];
extern const pb_field_t particle_ctrl_DNSConfiguration_fields[2];
extern const pb_field_t particle_ctrl_NetworkConfiguration_fields[7];
extern const pb_field_t particle_ctrl_GetNetworkConfigurationRequest_fields[3];

/* Maximum encoded size of messages (where known) */
/* particle_ctrl_IPConfiguration_size depends on runtime parameters */
/* particle_ctrl_DNSConfiguration_size depends on runtime parameters */
/* particle_ctrl_NetworkConfiguration_size depends on runtime parameters */
#define particle_ctrl_GetNetworkConfigurationRequest_size 13

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define NETWORK_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
